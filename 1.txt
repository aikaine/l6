// la6.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include <ctime>
#include <cstdlib>
using namespace std;

// ---------------------------- Часть 1: Цепное представление ----------------------------

struct Node {
    int data;
    Node* next;
};

class LinkedQueue {
private:
    Node* front;
    Node* rear;
public:
    LinkedQueue() : front(nullptr), rear(nullptr) {}

    void enqueue(int value) {
        Node* newNode = new Node{ value, nullptr };
        if (rear == nullptr) {
            front = rear = newNode;
        }
        else {
            rear->next = newNode;
            rear = newNode;
        }
    }

    void dequeue() {
        if (front == nullptr) {
            cout << "Очередь пуста. Удаление невозможно.\n";
            return;
        }
        Node* temp = front;
        front = front->next;
        if (front == nullptr) rear = nullptr;
        delete temp;
    }

    void display() {
        Node* temp = front;
        cout << "Очередь (цепное представление): ";
        while (temp) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }

    void showPointers() {
        cout << "Указатель P1 (front): " << front << ", значение: ";
        if (front) cout << front->data << endl;
        else cout << "null\n";

        cout << "Указатель P2 (rear): " << rear << ", значение: ";
        if (rear) cout << rear->data << endl;
        else cout << "null\n";
    }
};

// ---------------------------- Часть 2: Сплошное представление ----------------------------

class ArrayQueue {
private:
    int* queue;
    int capacity;
    int front, rear, size;

public:
    ArrayQueue(int cap) : capacity(cap), front(0), rear(-1), size(0) {
        queue = new int[capacity];
    }

    ~ArrayQueue() {
        delete[] queue;
    }

    void enqueue(int value) {
        if (size == capacity) {
            cout << "Очередь переполнена.\n";
            return;
        }
        rear = (rear + 1) % capacity;
        queue[rear] = value;
        ++size;
    }

    void dequeue() {
        if (size == 0) {
            cout << "Очередь пуста. Удаление невозможно.\n";
            return;
        }
        front = (front + 1) % capacity;
        --size;
    }

    void display() {
        cout << "Очередь (сплошное представление): ";
        for (int i = 0; i < size; ++i) {
            cout << queue[(front + i) % capacity] << " ";
        }
        cout << endl;
    }

    void showPointers() {
        if (size > 0) {
            cout << "P1 (front): индекс = " << front << ", значение = " << queue[front] << endl;
            cout << "P2 (rear): индекс = " << rear << ", значение = " << queue[rear] << endl;
        }
        else {
            cout << "Очередь пуста. Указатели не определены.\n";
        }
    }
};

// ---------------------------- Генерация случайных данных ----------------------------

void generateRandomNumbers(int arr[], int size) {
    srand(static_cast<unsigned>(time(0)));
    for (int i = 0; i < size; ++i) {
        arr[i] = rand() % 100;  // диапазон: 0–99
        cout << "Случайное число #" << (i + 1) << ": " << arr[i] << endl;
    }
}

// ---------------------------- Главная функция ----------------------------

int main() {
    setlocale(LC_ALL, "ru");
    const int N = 10;
    int data[N];

    cout << "Генерация 10 случайных чисел для очереди:\n";
    generateRandomNumbers(data, N);

    // Цепное представление
    LinkedQueue linkedQueue;
    for (int i = 0; i < N; ++i) {
        linkedQueue.enqueue(data[i]);
    }
    linkedQueue.display();
    linkedQueue.showPointers();

    // Удалим и добавим один элемент
    linkedQueue.dequeue();
    linkedQueue.enqueue(999);
    cout << "После удаления и добавления элемента (цепное представление):\n";
    linkedQueue.display();
    linkedQueue.showPointers();

    cout << "\n----------------------------------------\n";

    // Сплошное представление
    ArrayQueue arrayQueue(N + 1); // +1 для демонстрации добавления
    for (int i = 0; i < N; ++i) {
        arrayQueue.enqueue(data[i]);
    }
    arrayQueue.display();
    arrayQueue.showPointers();

    // Удалим и добавим один элемент
    arrayQueue.dequeue();
    arrayQueue.enqueue(999);
    cout << "После удаления и добавления элемента (сплошное представление):\n";
    arrayQueue.display();
    arrayQueue.showPointers();

    return 0;
}
