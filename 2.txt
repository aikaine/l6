// l5.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include <vector>
#include <chrono>
#include <iomanip>
#include <cstdlib>
#include <ctime>
#include <algorithm>

using namespace std;
using namespace std::chrono;

struct SearchStats {
    int comparisons = 0;
    double time_ms = 0.0;
};

void generateArray(vector<int>& arr, int size) {
    arr.resize(size);
    for (int& num : arr) {
        num = rand() % 10000;
    }
}

SearchStats linearSearch(const vector<int>& arr, int target) {
    SearchStats stats;
    auto start = high_resolution_clock::now();

    for (int i = 0; i < arr.size(); i++) {
        stats.comparisons++;
        if (arr[i] == target) break;
    }

    auto stop = high_resolution_clock::now();
    stats.time_ms = duration<double, milli>(stop - start).count();
    return stats;
}

SearchStats linearSearchWithSentinel(vector<int> arr, int target) {
    SearchStats stats;
    int n = arr.size();
    arr.push_back(target); // Добавляем барьер
    int i = 0;

    auto start = high_resolution_clock::now();
    while (arr[i] != target) {
        stats.comparisons++;
        i++;
    }

    auto stop = high_resolution_clock::now();
    stats.time_ms = duration<double, milli>(stop - start).count();
    return stats;
}

SearchStats binarySearch(const vector<int>& arr, int target) {
    SearchStats stats;
    int left = 0, right = arr.size() - 1;

    auto start = high_resolution_clock::now();
    while (left <= right) {
        int mid = left + (right - left) / 2;
        stats.comparisons++;
        if (arr[mid] == target) break;
        else if (arr[mid] < target) left = mid + 1;
        else right = mid - 1;
    }
    auto stop = high_resolution_clock::now();
    stats.time_ms = duration<double, milli>(stop - start).count();
    return stats;
}

void testSizes() {
    vector<int> sizes = { 20, 500, 1000, 3000, 5000, 10000 };
    cout << left << setw(10) << "Размер" << setw(20) << "Линейный поиск (мс)" << setw(20) << "Сравнения" << endl;

    for (int size : sizes) {
        vector<int> arr;
        generateArray(arr, size);
        int target = arr[rand() % size]; // Случайный элемент из массива
        SearchStats stats = linearSearch(arr, target);
        cout << setw(10) << size << setw(20) << fixed << setprecision(5) << stats.time_ms << setw(20) << stats.comparisons << endl;
    }
}

void testOrderingEffects() {
    vector<int> sizes = { 20, 500, 1000, 3000, 5000, 10000 };
    vector<double> sortedRatios = { 0.0, 0.25, 0.5, 0.75, 1.0 };

    for (int size : sizes) {
        for (double ratio : sortedRatios) {
            vector<int> arr;
            generateArray(arr, size);
            sort(arr.begin(), arr.begin() + size * ratio);
            int target = arr[rand() % size];

            SearchStats linStats = linearSearch(arr, target);

            vector<int> sortedArr = arr;
            sort(sortedArr.begin(), sortedArr.end());
            
            SearchStats binStats = binarySearch(sortedArr, target);

            cout << "Размер: " << size << ", Отсортировано: " << (ratio * 100) << "%\n";
            cout << "Линейный поиск - Время: " << linStats.time_ms << " мс, Сравнения: " << linStats.comparisons << endl;
            cout << "Бинарный поиск - Время: " << binStats.time_ms << " мс, Сравнения: " << binStats.comparisons << endl << endl;
        }
    }
}

void testBarrierEffect() {
    vector<int> sizes = { 20, 500, 1000, 3000, 5000, 10000 };
    cout << left << setw(10) << "Размер" << setw(20) << "С барьером (мс)" << setw(20) << "Сравнения" << setw(20) << "без барьера (мс)" << setw(20) << "Сравнения" << endl;

    for (int size : sizes) {
        vector<int> arr;
        generateArray(arr, size);
        int target = arr[rand() % size];
        SearchStats stats = linearSearchWithSentinel(arr, target);
        SearchStats stats2 = linearSearch(arr, target);
        cout << setw(10) << size << setw(20) << fixed << setprecision(5) << stats.time_ms << setw(20) << stats.comparisons << setw(20) << stats2.time_ms << setw(20) << stats2.comparisons << endl;
    }
}

int main() {
    setlocale(LC_ALL, "ru");
    srand(time(0));

    cout << "\n--- Линейный поиск: влияние размера массива ---\n";
    testSizes();

    cout << "\n--- Влияние упорядоченности на линейный и двоичный поиск ---\n";
    testOrderingEffects();

    cout << "\n--- Линейный поиск с барьером и без---\n";
    testBarrierEffect();

    return 0;
}
